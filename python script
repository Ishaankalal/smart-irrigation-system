import paho.mqtt.client as mqtt
import smtplib
from email.mime.text import MIMEText
from email.utils import formataddr
import ssl
import time
from datetime import datetime, timedelta

# === Config ===
BROKER = "broker.hivemq.com"
PORT = 8000  # WebSocket port
TOPIC = "esp32/alert"

EMAIL_SENDER = "ishaankalal2k4@gmail.com"
EMAIL_PASSWORD = "YOUR_APP_PASSWORD"   # Gmail App Password
EMAIL_RECEIVER = "22bec053@nirmauni.ac.in"

# === State ===
last_email_time = None
EMAIL_INTERVAL = timedelta(minutes=30)  # Resend every 30 minutes

# === Email Function ===
def send_email(message):
    global last_email_time
    now = datetime.now()

    if last_email_time and now - last_email_time < EMAIL_INTERVAL:
        print(f"ℹ Email already sent {now - last_email_time} ago, waiting for interval...")
        return

    try:
        msg = MIMEText(message, "plain", "utf-8")
        msg["Subject"] = "🌱 Smart Farm Alert 🚨"
        msg["From"] = formataddr(("Smart Farm System", EMAIL_SENDER))
        msg["To"] = EMAIL_RECEIVER

        print("📧 Connecting to Gmail server...")
        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)

        print("✅ Alert Email Sent")
        last_email_time = now

    except Exception as e:
        print("❌ Email Sending Failed:", e)

# === MQTT Callbacks ===
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("✅ Connected to MQTT Broker")
        client.subscribe(TOPIC)
        print(f"📡 Subscribed to topic: {TOPIC}")
    else:
        print("❌ Failed to connect, return code:", rc)

def on_message(client, userdata, msg):
    global last_email_time
    try:
        alert_msg = msg.payload.decode().strip()
        print(f"⚠ Alert Received: {alert_msg}")

        # Only send email for MOTOR ON + MOISTURE NOT INCREASED
        if "MOTOR ON" in alert_msg.upper() and "MOISTURE NOT INCREASED" in alert_msg.upper():
            send_email(alert_msg)
        else:
            print("ℹ Ignored non-critical message.")

        # Reset alert flag if motor turned off or moisture improved
        if "MOTOR OFF" in alert_msg.upper() or "MOISTURE INCREASED" in alert_msg.upper():
            if last_email_time:
                print("🔄 Alert cleared, ready for next email")
            last_email_time = None

    except Exception as e:
        print("❌ Error in on_message:", e)

# === MQTT Client Setup ===
def main():
    client = mqtt.Client(transport="websockets")  # Important: WebSockets
    client.on_connect = on_connect
    client.on_message = on_message
    client.enable_logger()

    while True:
        try:
            print("🔌 Trying to connect to MQTT broker via WebSockets...")
            client.connect(BROKER, PORT, 60)
            print("🔄 Entering MQTT loop...")
            client.loop_forever()
        except Exception as e:
            print("❌ MQTT Connection Failed:", e)
            print("🔄 Retrying in 5 seconds...")
            time.sleep(5)

if _name_ == "_main_":
    main()
